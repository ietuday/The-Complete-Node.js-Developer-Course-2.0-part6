1
00:00:01,290 --> 00:00:06,810
In this video you are going to break out some functionality currently in server G-S into a separate

2
00:00:06,810 --> 00:00:07,450
file.

3
00:00:07,500 --> 00:00:12,540
And we're also going to set up our test suite so we can verify that those utility functions are working

4
00:00:12,780 --> 00:00:13,810
as expected.

5
00:00:13,980 --> 00:00:19,320
For the moment our goal is going to be to create a function that helps us generate this object instead

6
00:00:19,320 --> 00:00:21,900
of having to define the object every single time.

7
00:00:22,020 --> 00:00:27,710
We'll simply pass in two arguments to a function the name and the text it'll generate the object.

8
00:00:27,810 --> 00:00:30,710
So we will have to do that work down below.

9
00:00:30,900 --> 00:00:36,180
Now to get this done we are going to make a separate file that we load into server japes with a method

10
00:00:36,180 --> 00:00:40,650
we call instead of defining the object inside of the server folder.

11
00:00:40,740 --> 00:00:47,670
We're going to make a new directory called utils and inside of utils we're going to make a file called

12
00:00:48,000 --> 00:00:49,050
Message dot.

13
00:00:49,080 --> 00:00:54,870
J.S. this is going to store our utility functions related to messaging and in our case we're going to

14
00:00:54,860 --> 00:00:57,790
make a new one called generate message.

15
00:00:58,110 --> 00:01:03,230
Let's make a variable called generate message.

16
00:01:03,250 --> 00:01:08,170
This is going to be a function and it's going to take those two arguments I talked about earlier from

17
00:01:08,710 --> 00:01:15,760
end text it's then going to return an object just like the objects we pass in as the second argument

18
00:01:15,820 --> 00:01:17,150
to emit.

19
00:01:17,170 --> 00:01:21,010
Now we'll do this together and your challenge will be the testing side of things.

20
00:01:21,040 --> 00:01:28,270
For now all we need to do is return an object specifying from as the From argument up above text as

21
00:01:28,270 --> 00:01:29,910
the text argument up above.

22
00:01:30,040 --> 00:01:31,380
And to create it at.

23
00:01:31,460 --> 00:01:38,050
And that is going to get generated by calling a new date and calling it's got time method.

24
00:01:38,320 --> 00:01:43,690
With this in place our utility function is now done all we need to do is export it down below.

25
00:01:43,690 --> 00:01:46,180
Module exports.

26
00:01:46,300 --> 00:01:52,000
We're going to set that equal to an object that has a generate message property equal to the generate

27
00:01:52,000 --> 00:01:54,150
message variable defined above.

28
00:01:54,190 --> 00:01:56,720
We'll eventually be able to integrate this into server Dom.

29
00:01:56,750 --> 00:02:02,100
J.S. But before we do let's go ahead and write some test cases to make sure it works as expected.

30
00:02:02,140 --> 00:02:07,510
This means we are going to need to install Moka And we're also going to need to install the expect assertion

31
00:02:07,510 --> 00:02:14,630
library then we'll set up our package that Jason scripts then we can write the test case first up inside

32
00:02:14,620 --> 00:02:15,490
of the terminal.

33
00:02:15,490 --> 00:02:21,550
We are going to install using NPM install two modules we need expect which is our assertion library.

34
00:02:21,700 --> 00:02:25,480
At one point twenty point two.

35
00:02:25,750 --> 00:02:32,620
And we're also going to install Moka to run our test suite at Version 3 point zero point two and we're

36
00:02:32,620 --> 00:02:37,750
going to use the save death flag to add these as development dependencies.

37
00:02:37,750 --> 00:02:42,520
Let's go ahead and run this command and once it's done we can move into packaged up Jason and set up

38
00:02:42,520 --> 00:02:44,120
those test scripts.

39
00:02:44,130 --> 00:02:49,620
They're going to be identical to the ones we used in the last project inside a package.

40
00:02:49,630 --> 00:02:54,820
Jason we now have two dev dependencies and inside of scripts we can get started by removing the old

41
00:02:54,850 --> 00:02:55,750
test script.

42
00:02:55,870 --> 00:02:59,170
And we're going to add those two scripts test and test.

43
00:02:59,290 --> 00:03:00,080
Watch.

44
00:03:00,340 --> 00:03:04,080
Let's go ahead and fill out the basics first test.

45
00:03:04,130 --> 00:03:10,540
Set that equal to an empty string for the moment and test high and watch the test watch script as we

46
00:03:10,540 --> 00:03:21,940
know simply calls gnomon calling the NPM test script gnomon hyphen hyphen the X is C then inside single

47
00:03:21,940 --> 00:03:26,640
quotes NPM test that is going to get the job done.

48
00:03:26,650 --> 00:03:31,270
Now when we run gnomon here we're actually running the globally installed gnomon.

49
00:03:31,390 --> 00:03:34,970
We can also install it locally to fix that to get that done.

50
00:03:35,010 --> 00:03:39,100
We're going to do is run NPM install node mohn.

51
00:03:39,280 --> 00:03:44,770
We're going to add the most recent version which is version one point ten point two and we are going

52
00:03:44,770 --> 00:03:47,900
to use the save dead flag to install it.

53
00:03:47,950 --> 00:03:54,550
Now when we install node like this our application no longer relies on that global node Mohn installation.

54
00:03:54,550 --> 00:03:58,330
So if someone else grabs this from get hub they're going to be able to get started without needing to

55
00:03:58,330 --> 00:04:00,440
install anything globally.

56
00:04:00,640 --> 00:04:06,190
Next up is that test script the test script first has to set up those environment variables that were

57
00:04:06,190 --> 00:04:07,390
going to be configuring.

58
00:04:07,390 --> 00:04:08,530
We'll do that later.

59
00:04:08,560 --> 00:04:16,400
For now we're going to do is run Moka passing in the pattern for the files we want to test the files

60
00:04:16,400 --> 00:04:18,620
we want to test are in that server directory.

61
00:04:18,740 --> 00:04:20,460
They could be in any subdirectory.

62
00:04:20,480 --> 00:04:27,390
So we'll use star star and the files regardless of their name are going to end in test dot J.

63
00:04:27,420 --> 00:04:29,930
S And with this in place we are done.

64
00:04:30,020 --> 00:04:33,020
We can now run our test suite over in the terminal.

65
00:04:33,020 --> 00:04:38,370
If I run NPM test all we're going to see is that we have 0 tests in place.

66
00:04:38,430 --> 00:04:40,500
Here we have the server test file.

67
00:04:40,500 --> 00:04:43,870
Globbing pattern it could not resolve any files.

68
00:04:43,950 --> 00:04:46,620
We can fix this issue by simply adding a test file.

69
00:04:46,620 --> 00:04:52,110
I'm going to add a test file for the message utility message test.

70
00:04:52,150 --> 00:04:53,060
J.S..

71
00:04:53,070 --> 00:04:56,760
Now we can go ahead and rerun the NPM test command this time around.

72
00:04:56,760 --> 00:05:02,610
It does indeed find a file and we see we have zero passing tests which is a great starting point inside

73
00:05:02,610 --> 00:05:03,270
of here.

74
00:05:03,270 --> 00:05:06,950
We're going to need to add a test for the message function.

75
00:05:06,960 --> 00:05:08,450
We just defined.

76
00:05:08,610 --> 00:05:13,500
Now this test is going to verify that the object we get back is what we would expect given the parameters

77
00:05:13,530 --> 00:05:18,360
we passed in we'll set up the basic structure of the test file together and you're going to write the

78
00:05:18,360 --> 00:05:20,140
individual test case.

79
00:05:20,220 --> 00:05:25,970
First up we need to load and expect no way to get around that var expect equals require expect.

80
00:05:26,040 --> 00:05:32,240
This is going to let us make our assertions about the return value from our generate message function.

81
00:05:32,460 --> 00:05:39,250
The next thing we're going to do is add a describe block here we're going to add a describe block for

82
00:05:39,250 --> 00:05:46,450
the function generate message and inside of the callback function we'll have all of the test cases for

83
00:05:46,540 --> 00:05:47,900
that function.

84
00:05:47,980 --> 00:05:52,720
And before we can actually create a test case and fill it out we do need to load in the module or testing.

85
00:05:52,790 --> 00:05:56,130
I'm going to make a variable and using yes 60 structuring.

86
00:05:56,140 --> 00:05:56,980
We're going to pull off.

87
00:05:56,980 --> 00:06:04,210
Generate message generate message and then we can go ahead and require it using require specifying the

88
00:06:04,210 --> 00:06:07,730
local path dot forward slash message.

89
00:06:07,840 --> 00:06:11,200
It's in the same directory as the test file where we currently are.

90
00:06:11,200 --> 00:06:14,880
So there's no reason to do any directory moving with this in place.

91
00:06:14,890 --> 00:06:17,680
We can now add to the individual test case.

92
00:06:17,680 --> 00:06:28,760
It should generate the correct message object and your job is going to be to write the test case this

93
00:06:28,760 --> 00:06:30,250
is going to be a synchronous test.

94
00:06:30,260 --> 00:06:32,710
So there is no need to provide done.

95
00:06:32,810 --> 00:06:38,830
All you need to do is call generate message with two values a from value and a text value.

96
00:06:38,930 --> 00:06:45,140
You're going to get the response back store response in variable then you're going to make some assertions

97
00:06:45,140 --> 00:06:46,490
about the response.

98
00:06:46,490 --> 00:06:48,830
First up assert that firm is correct.

99
00:06:48,950 --> 00:06:57,200
Assert from matches the value you passed in you're also going to assert that the text matches up.

100
00:06:57,220 --> 00:07:04,100
And lastly you're going to assert that the created value is a number.

101
00:07:04,140 --> 00:07:09,450
It doesn't matter what number it is you're going to use the to be a method to check the type assert

102
00:07:09,440 --> 00:07:15,990
create it at is number once you have all of that done you should be able to rerun the test script over

103
00:07:15,990 --> 00:07:20,350
inside of the terminal and you should say you have one test and it is indeed passing.

104
00:07:20,400 --> 00:07:24,540
Now but there's a little open ended because we have tested quite a few things in the past.

105
00:07:24,540 --> 00:07:30,900
Feel free to refer to any other videos or any other code you wrote for this course to get this challenge

106
00:07:31,170 --> 00:07:32,140
done.

107
00:07:32,160 --> 00:07:37,480
So once again call the function grab its return value and assert things about that value.

108
00:07:37,500 --> 00:07:43,660
Pause the video and when you're done click play it all right to get this done.

109
00:07:43,710 --> 00:07:46,330
The first thing I'm going to do is define some variables.

110
00:07:46,440 --> 00:07:49,350
It's fine if you win about things a different way.

111
00:07:49,350 --> 00:07:54,840
As long as you got the assertions working correctly to get started I'm going to make a from a variable

112
00:07:54,840 --> 00:07:56,480
to store the from value.

113
00:07:56,520 --> 00:08:04,710
I'll go ahead and use gen I'm also going to make a text variable to store the text value some message.

114
00:08:04,710 --> 00:08:09,720
Now what I want to do is make my final variable which is going to store the response the message that

115
00:08:09,720 --> 00:08:14,660
comes back from the generate message function which is exactly what I'm going to call right here.

116
00:08:14,760 --> 00:08:19,560
I'm going to call generate message passing in the two necessary arguments.

117
00:08:19,560 --> 00:08:27,570
The From argument end of the text argument I have that right here from comma text.

118
00:08:27,690 --> 00:08:33,260
Next up and the final thing we need to do is make assertions about this object that comes back.

119
00:08:33,490 --> 00:08:44,160
I am going to expect that message dot created at is a number using to be a.

120
00:08:44,220 --> 00:08:46,830
And passing in the type number.

121
00:08:46,830 --> 00:08:51,360
This was the first assertion you needed to make to verify the property is correct.

122
00:08:51,360 --> 00:08:56,760
Next up we're going to expect that message has certain properties inside of it.

123
00:08:56,760 --> 00:09:01,440
We're going to do this using the to include assertion though you could have created two separate statements

124
00:09:01,620 --> 00:09:06,180
one for message dot from and a separate one for message dot text.

125
00:09:06,180 --> 00:09:07,980
All of those are valid solutions.

126
00:09:07,980 --> 00:09:15,390
I'm just going to happen to use to include and we're going to specify some things that message should

127
00:09:15,390 --> 00:09:20,790
include first up it should have a from property equal to the from a variable up above.

128
00:09:20,790 --> 00:09:23,300
We can go ahead and use yes six to define that.

129
00:09:23,370 --> 00:09:27,360
And the same thing is going to happen for text text should equal text.

130
00:09:27,420 --> 00:09:30,060
And we're going to use yes 6 to set that up.

131
00:09:30,180 --> 00:09:35,440
We can even simplify this further from comma text.

132
00:09:35,550 --> 00:09:36,330
Excellent.

133
00:09:36,330 --> 00:09:41,210
Would this in place are test cases now done and we can go ahead and remove these commented out lines.

134
00:09:41,340 --> 00:09:48,090
And the final thing you needed to do was run the test suite from the terminal by running NPM test.

135
00:09:48,150 --> 00:09:53,070
When we do it what do we get we get our one test under generate message should generate correct message

136
00:09:53,100 --> 00:09:56,940
object and it is indeed passing which is fantastic.

137
00:09:57,000 --> 00:10:00,320
Now that we have some tests verifying our function works as expected.

138
00:10:00,330 --> 00:10:05,100
Let's go ahead and integrate it into our application by moving into server J S and replacing all of

139
00:10:05,100 --> 00:10:11,090
the objects we pass to the emet function with calls to our new function.

140
00:10:11,160 --> 00:10:15,460
The first step in this process is going to be to inport the function we just created.

141
00:10:15,480 --> 00:10:19,350
I'm going to do that up above by creating a constant will you.

142
00:10:19,370 --> 00:10:25,660
Yes 60 structuring to grab a generate message and we're going to grab it off of a call to require now

143
00:10:25,660 --> 00:10:28,370
or requiring a local file in a different directory.

144
00:10:28,470 --> 00:10:29,390
We're going to start with.

145
00:10:29,400 --> 00:10:30,470
Forward slash.

146
00:10:30,540 --> 00:10:34,810
We're going to go into the utility directory since we're currently in the server directory.

147
00:10:35,100 --> 00:10:39,230
Then we can grab the file message by specifying it right here.

148
00:10:39,240 --> 00:10:45,660
Now we have access to generate message and instead of creating these objects we can call generate message

149
00:10:45,900 --> 00:10:46,520
right here.

150
00:10:46,620 --> 00:10:53,700
We're going to replace Welcome to the chat app and the admin variables with arguments generate a message

151
00:10:53,850 --> 00:11:03,700
from admin and the tax is going to be a welcome to the chat app we have the exact same functionality

152
00:11:03,730 --> 00:11:08,530
but now we're using a function to generate that object for us which is going to make scaling that out

153
00:11:08,530 --> 00:11:09,600
a lot easier.

154
00:11:09,610 --> 00:11:14,350
It's also going to make updating what is inside of a message much easier as well.

155
00:11:14,350 --> 00:11:18,320
Next up we can change the one we have down below for new user joined.

156
00:11:18,370 --> 00:11:21,200
We're going to go ahead and replace this with a call to generate messages.

157
00:11:21,200 --> 00:11:24,720
Well once again this one's from the admin.

158
00:11:24,720 --> 00:11:27,450
So the first argument will be the string admin.

159
00:11:27,450 --> 00:11:31,820
The second argument is the text new user joined.

160
00:11:31,950 --> 00:11:32,830
Excellent.

161
00:11:32,850 --> 00:11:39,000
This one is done too and the final one is the one that actually gets sent to the user from a user which

162
00:11:39,000 --> 00:11:41,720
means we have message data from a message text.

163
00:11:41,790 --> 00:11:43,920
Those are going to be our arguments.

164
00:11:44,130 --> 00:11:48,680
We're going to call generate message with those two message doctor from.

165
00:11:48,810 --> 00:11:50,220
And as the second argument.

166
00:11:50,220 --> 00:11:52,110
Message dot text.

167
00:11:52,200 --> 00:11:54,270
And with this in place we are done.

168
00:11:54,300 --> 00:11:59,260
The last thing left to do for this video is test that this is working as expected.

169
00:11:59,430 --> 00:12:04,610
I'm going to start up the server using gnomon without a space between node and my own server forwards

170
00:12:04,740 --> 00:12:05,980
Siavash server.

171
00:12:06,060 --> 00:12:12,000
J.S. once the server is up we can go ahead and test things out by opening up a couple of tabs with the

172
00:12:12,000 --> 00:12:14,980
developer tools open for the first tab.

173
00:12:15,010 --> 00:12:20,350
Going to visit local host 3000 inside of the council we should see our new message printing.

174
00:12:20,400 --> 00:12:25,440
The object looks the same even though it's now generated by the function and we can test that everything

175
00:12:25,440 --> 00:12:31,130
else is working as expected to by opening up a second tab and opening up its developer tools.

176
00:12:31,290 --> 00:12:35,000
And this time around the first tab should see a new message.

177
00:12:35,040 --> 00:12:36,580
Here we have a new user joined.

178
00:12:36,600 --> 00:12:37,980
That's still working.

179
00:12:37,980 --> 00:12:43,420
And if we emit a custom message from this second tab it should show up in the first.

180
00:12:43,590 --> 00:12:49,420
I'm going to use the up arrow key to run one of our previous create message event emitters.

181
00:12:49,530 --> 00:12:54,210
I'm going to fire off the function and if I go to the first tab We do indeed get the message which is

182
00:12:54,240 --> 00:12:54,900
fantastic.

183
00:12:54,900 --> 00:13:00,230
This should work print's in the first tab and also Prince in the second sense we're calling IO data

184
00:13:00,660 --> 00:13:03,530
as opposed to the broadcast method.

185
00:13:03,660 --> 00:13:08,330
Now that everything is working we are done we can make a commit and wrap this one up.

186
00:13:08,430 --> 00:13:10,630
I'm going to call get status from the terminal.

187
00:13:10,710 --> 00:13:16,990
Here we have new files as well as modified ones which means we're going to want to call get ad dot.

188
00:13:17,010 --> 00:13:28,190
Next up we can call get commit with a message flag create generate message utility.

189
00:13:28,330 --> 00:13:29,050
Excellent.

190
00:13:29,200 --> 00:13:33,230
I'm going to push this up to get hub and that is it for this one.

191
00:13:33,320 --> 00:13:37,870
Then the next one we're going to take a look at socket I O acknowledgements which are fantastic It's

192
00:13:37,870 --> 00:13:39,510
coming up next so stay tuned.

193
00:13:39,520 --> 00:13:40,950
I'll see you then.

