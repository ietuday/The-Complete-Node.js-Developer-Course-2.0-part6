1
00:00:00,740 --> 00:00:06,410
As we discussed in the last video we have our Sacket join listener but the problem is that the information

2
00:00:06,410 --> 00:00:08,010
inside of here it gets lost.

3
00:00:08,060 --> 00:00:12,590
Once the callback is complete things like the user's name and the room name.

4
00:00:12,650 --> 00:00:15,050
They're not persisted anywhere.

5
00:00:15,050 --> 00:00:19,580
We're going to need that information to complete our event listeners down below create message is going

6
00:00:19,580 --> 00:00:24,740
to need to know the user's name as well as the room name to send that message to the specific room.

7
00:00:24,740 --> 00:00:27,740
Same thing with create location message.

8
00:00:27,740 --> 00:00:33,350
Now we don't have access to the data that is inside of join up above but we do have access to one common

9
00:00:33,350 --> 00:00:35,640
thing and that is the Sacket ID.

10
00:00:35,810 --> 00:00:38,110
We have access to the socket variable right here.

11
00:00:38,270 --> 00:00:44,660
Socket dot ID and we also have access to it down below inside of our other event listeners and this

12
00:00:44,660 --> 00:00:47,780
is going to be what we use inside of a data structure.

13
00:00:47,770 --> 00:00:49,120
We're about to create.

14
00:00:49,160 --> 00:00:53,540
We're going to create an array of users where we can store this information when we want to look up

15
00:00:53,540 --> 00:00:55,940
a user like you might want to do down below.

16
00:00:56,030 --> 00:00:58,500
We'll simply pass in the idea to some function.

17
00:00:58,520 --> 00:01:04,670
We'll get back the name and the room name and we can emit the event as we want you know in order to

18
00:01:04,670 --> 00:01:08,080
get that done and we are going to make a brand new file in utils.

19
00:01:08,180 --> 00:01:14,750
We're going to call this file users dot J.S. and this is where we're going to store everything related

20
00:01:14,750 --> 00:01:19,100
to that user's data structure and it's going to be nothing more than an array.

21
00:01:19,400 --> 00:01:21,000
It's going to be an array like this.

22
00:01:21,000 --> 00:01:26,510
It'll be an array of objects and on each object we're going to have the ID which will be the socket

23
00:01:26,570 --> 00:01:30,010
ID some sort of really long string like this.

24
00:01:31,500 --> 00:01:36,900
We'll also have our name and this is the display name for the user of mine might be Andrew.

25
00:01:36,990 --> 00:01:43,680
And finally the room the user joined this could be something like The Office fans.

26
00:01:44,070 --> 00:01:49,380
This is all the information we need to store in our data structure for a user to be able to wire everything

27
00:01:49,440 --> 00:01:50,100
up.

28
00:01:50,100 --> 00:01:55,590
Now the real work is going to come inside of the methods that we'll be creating to manipulate this array.

29
00:01:55,590 --> 00:01:56,720
We're going to have four.

30
00:01:56,820 --> 00:02:00,680
We want to be able to add a user via an add user method.

31
00:02:00,690 --> 00:02:06,810
This is going to take three pieces of information the id the name and the Roman name.

32
00:02:06,810 --> 00:02:10,860
We're also going to want to have a method for removing a user when they leave a room.

33
00:02:10,860 --> 00:02:14,510
Remember we want to update that people list in the left hand side bar.

34
00:02:14,630 --> 00:02:21,860
If I go to localhost 3000 right here when someone leaves we want to update the people list removing

35
00:02:21,860 --> 00:02:27,170
them from the list which means we're going to need a way to remove them as well as add them remove user.

36
00:02:27,260 --> 00:02:29,930
And we're going to be removing users by the socket.

37
00:02:29,960 --> 00:02:31,090
I d.

38
00:02:31,190 --> 00:02:33,930
Next up we're going to have a way to fetch a user.

39
00:02:33,980 --> 00:02:39,620
This is going to come in handy when we're trying to send a message like we do inside of the create message

40
00:02:39,680 --> 00:02:40,890
listener right here.

41
00:02:40,910 --> 00:02:45,680
We're going to want access to the user's name as well as the room in order to fire off the new message

42
00:02:45,680 --> 00:02:51,740
event that is going to happen via a get user method which is going to take an I.D. and it will return

43
00:02:51,770 --> 00:03:00,400
the object up above the last one and we're going to be adding is get user a list and get user list get

44
00:03:00,410 --> 00:03:05,900
user list is going to take the room name it is going to figure out exactly which users are in that room

45
00:03:06,050 --> 00:03:11,490
and it's going to return an array of names and we'll print those names to the client.

46
00:03:11,530 --> 00:03:15,200
These four methods are all we need to get this done.

47
00:03:15,200 --> 00:03:16,850
Now there's a couple of ways we could do this.

48
00:03:16,910 --> 00:03:18,670
We could do something like this.

49
00:03:18,710 --> 00:03:24,280
We might make an array called users sending an equal to an empty array and then we might define our

50
00:03:24,280 --> 00:03:25,100
functions.

51
00:03:25,180 --> 00:03:26,250
You don't have to write this out.

52
00:03:26,260 --> 00:03:27,780
I'm going to be deleting this in a moment.

53
00:03:27,850 --> 00:03:32,860
A VAR AD user and we'll set that call to a function that takes ID name and Rome.

54
00:03:32,860 --> 00:03:38,350
Then inside the function we'll do something like manipulate the Saray with a user's push pushing on

55
00:03:38,350 --> 00:03:46,640
some object then we'll export it using modules export exporting and we add a user function as the add

56
00:03:46,640 --> 00:03:50,000
user property and then we would call add user over and server J.

57
00:03:50,000 --> 00:03:50,540
S..

58
00:03:50,600 --> 00:03:54,470
Now I know I went fast there and that's because we're not going to be using this approach.

59
00:03:54,470 --> 00:03:55,880
This approach works fine.

60
00:03:55,880 --> 00:03:58,760
We have a users array and we can manipulate the array.

61
00:03:58,760 --> 00:04:04,260
It does get the job done but what we're going to do instead is use the yes six class syntax.

62
00:04:04,280 --> 00:04:07,570
This is going to let us create a user's class.

63
00:04:07,700 --> 00:04:12,530
We'll be able to make a new instance of that class and fire all of our methods which will be defining

64
00:04:12,710 --> 00:04:13,640
up above.

65
00:04:13,640 --> 00:04:19,440
I'm going to do this as opposed to creating ad hoc functions that all work with one piece of information

66
00:04:19,520 --> 00:04:20,500
right here.

67
00:04:20,810 --> 00:04:23,390
Now we get this done and we are going to have to learn something new.

68
00:04:23,390 --> 00:04:24,290
We're going to be learning about.

69
00:04:24,320 --> 00:04:24,720
Yes.

70
00:04:24,740 --> 00:04:31,150
Six classes in order to talk about those Let's go ahead and simply create one right here.

71
00:04:31,160 --> 00:04:35,290
Now the syntax for creating a new class is going to look a little strange at first.

72
00:04:35,290 --> 00:04:37,500
It is unique to what we're about to do.

73
00:04:37,580 --> 00:04:42,290
But I promise that once you make one or two classes and add a few methods you'll get really used to

74
00:04:42,290 --> 00:04:46,750
defining the methods and the classes themselves to kick things off.

75
00:04:46,760 --> 00:04:50,080
We're going to create a simple class for a person.

76
00:04:50,090 --> 00:04:55,760
This means that we're making a set of data and a set of methods that are useful for manipulating the

77
00:04:55,760 --> 00:04:56,530
person.

78
00:04:56,570 --> 00:05:01,940
Now in order to get started we are going to use the class keyword followed by the class name.

79
00:05:01,940 --> 00:05:06,650
We're going to use an upper case first letter for our class definition since we are going to be creating

80
00:05:06,650 --> 00:05:09,830
new instances of them with the new keyword.

81
00:05:09,830 --> 00:05:14,750
You do not need to use an upper case P this is just common convention across javascript.

82
00:05:14,840 --> 00:05:22,130
If a function is meant to be used with new like new person new object or new anything else it should

83
00:05:22,130 --> 00:05:23,900
have an uppercase first letter.

84
00:05:23,900 --> 00:05:26,360
This is just a styling convention.

85
00:05:26,570 --> 00:05:31,800
Now right after our name we can simply open and close some curly braces and there we have it.

86
00:05:31,850 --> 00:05:35,010
We have a brand new class and we can even make an instance of it.

87
00:05:35,060 --> 00:05:40,030
We can make a variable called me and said it equal to new uppercase.

88
00:05:40,050 --> 00:05:44,090
The person calling it as a function just like this.

89
00:05:44,090 --> 00:05:48,320
Now we have a new instance of the class and we can do whatever we like with it.

90
00:05:48,380 --> 00:05:52,760
Currently it doesn't do anything but we do have an instance created.

91
00:05:52,910 --> 00:05:57,770
Now one of the first things about a class that's really great is the ability to add a constructor function.

92
00:05:57,830 --> 00:06:00,760
A constructor function is a special function.

93
00:06:00,800 --> 00:06:02,690
It is specific to the class.

94
00:06:02,690 --> 00:06:08,330
It automatically fires and it lets you initialize the instance of your class.

95
00:06:08,390 --> 00:06:14,120
In this case we want to do something to customize an individual person when a new person is created

96
00:06:14,480 --> 00:06:15,830
to define a constructor function.

97
00:06:15,830 --> 00:06:21,470
We start with the name constructor but instead of adding a colon or anything else we simply go right

98
00:06:21,470 --> 00:06:24,870
to our function arguments and right into the curly braces.

99
00:06:24,890 --> 00:06:26,480
This is our function.

100
00:06:26,510 --> 00:06:31,190
It's just like a regular function the code inside is going to get executed and these are arguments but

101
00:06:31,190 --> 00:06:36,830
the syntax for setting it up does look pretty different than what we would do on an object or on anything

102
00:06:37,070 --> 00:06:37,850
else.

103
00:06:37,850 --> 00:06:41,680
Now this constructor function it gets called by default.

104
00:06:41,690 --> 00:06:46,700
You do not need to manually call it and that actually gets called with the arguments that you specify

105
00:06:46,760 --> 00:06:47,870
right here.

106
00:06:47,870 --> 00:06:52,160
Which means that we could have our person constructor function take two arguments.

107
00:06:52,160 --> 00:06:56,970
Maybe we want to initialize a new person with a name and an age.

108
00:06:57,080 --> 00:06:59,340
That means we would pass in name and age right here.

109
00:06:59,390 --> 00:07:01,300
I can say that name is a string.

110
00:07:01,520 --> 00:07:06,250
I'm going to set it as my name and age is a number like twenty five.

111
00:07:06,260 --> 00:07:10,820
The constructor function is now going to get called with this data and we can prove this by using cancel

112
00:07:10,820 --> 00:07:11,700
that log.

113
00:07:12,350 --> 00:07:16,520
To print out the name and as the second argument the H.

114
00:07:16,640 --> 00:07:18,640
Now let's go ahead and run this file and see what we got.

115
00:07:18,650 --> 00:07:20,360
It's sitting in server utility.

116
00:07:20,390 --> 00:07:26,540
I'm going to shut down gnomon and run it clear node server.

117
00:07:26,550 --> 00:07:29,810
Forward slash you tills forward slash users.

118
00:07:29,860 --> 00:07:33,420
J.S. when I run the file what do we get we get Andrew 25.

119
00:07:33,420 --> 00:07:37,080
Because the arguments were properly passed into the constructor.

120
00:07:37,080 --> 00:07:42,450
Now passing data in really isn't useful what we want to do is modify the specific instance you want

121
00:07:42,450 --> 00:07:42,880
to set.

122
00:07:42,880 --> 00:07:48,690
This person's name and age not the name and age for all people in order to do that we're going to use

123
00:07:49,020 --> 00:07:53,210
this keyword in class methods and in the constructor function.

124
00:07:53,220 --> 00:07:57,870
This refers to the instance as opposed to the class which means right.

125
00:07:57,870 --> 00:08:05,670
Here we can set a property on this individual person and this dot name equals name just like this.

126
00:08:05,680 --> 00:08:07,860
I can do the exact same thing for age.

127
00:08:07,920 --> 00:08:10,860
This age equals the age.

128
00:08:10,890 --> 00:08:14,500
Using this is how we customize the individual instance.

129
00:08:14,550 --> 00:08:20,610
Now what we have is an object and we can actually access those properties down below the ME variable

130
00:08:20,610 --> 00:08:21,280
right here.

131
00:08:21,300 --> 00:08:25,060
It is identical to the this variable as defined up above.

132
00:08:25,200 --> 00:08:29,330
Which means that we can actually access those properties console dialog.

133
00:08:29,820 --> 00:08:33,270
I'm going to print the string this name for formatting only.

134
00:08:33,270 --> 00:08:39,630
Then I'm going to reference the actual me dot name property and we can do the exact same thing for age.

135
00:08:39,660 --> 00:08:45,960
We're going to print what we had put in as this age only We're going to access it via media age.

136
00:08:46,020 --> 00:08:53,800
We can now rerun the file using gnomon gnomon server forward slash you tills forward slash users.

137
00:08:53,810 --> 00:08:55,260
Jay Yes and what do we get.

138
00:08:55,260 --> 00:09:02,010
We get exactly what we expect the individual person was updated this name was set to Erigeron it is

139
00:09:02,010 --> 00:09:04,560
indeed showing that down below.

140
00:09:04,890 --> 00:09:09,430
Now that we have a basic idea as to how we can initialize a class.

141
00:09:09,510 --> 00:09:12,120
Let's go ahead and talk about methods.

142
00:09:12,120 --> 00:09:16,770
Methods can be any function they could take arguments maybe they don't take arguments and to define

143
00:09:16,770 --> 00:09:17,080
them.

144
00:09:17,250 --> 00:09:20,460
All we do is the following without adding a comma.

145
00:09:20,460 --> 00:09:24,530
Another quirk of the class syntax we specify our method name.

146
00:09:24,580 --> 00:09:31,050
I'm going to create one called a get user description and this one is not going to take any arguments

147
00:09:31,110 --> 00:09:35,670
so we can leave that arguments list empty down below inside of the function itself.

148
00:09:35,670 --> 00:09:42,180
We're going to go ahead and return a description since the method after all is called Get user description.

149
00:09:42,180 --> 00:09:47,180
We're going to return a template string injecting some values inside of there.

150
00:09:47,280 --> 00:09:56,280
The general flow is going to be Jeon is one year inside of parentheses as years old.

151
00:09:56,280 --> 00:10:02,370
This is what we want to print but we want to use those specific values for this individual person and

152
00:10:02,370 --> 00:10:07,110
to do that we're going to access those properties once again instead of a static name we're going to

153
00:10:07,110 --> 00:10:15,140
inject this dot name and instead of a static age we're going to inject the age this dot age.

154
00:10:15,150 --> 00:10:19,990
Now we can go ahead and actually test out get user description by calling it down below.

155
00:10:20,100 --> 00:10:22,680
We can make a variable called description.

156
00:10:23,040 --> 00:10:30,120
We can set it equal to me dot a get user description and we can go ahead and do something with the return

157
00:10:30,120 --> 00:10:35,500
value like printed to the screen using Konsole dot lock inside of the log argument list.

158
00:10:35,550 --> 00:10:39,150
I'm not going to pass in description.

159
00:10:39,180 --> 00:10:43,830
Now we can save the file and we should see over inside of the terminal our description in this case

160
00:10:43,890 --> 00:10:50,730
Andrew in 2005 Andrew is 25 years old when I saved the file gnomon is going to restart and right here

161
00:10:50,730 --> 00:10:55,260
we get just that Andrew is 25 years old prints to the screen.

162
00:10:55,410 --> 00:10:57,940
This is the very basics of classes.

163
00:10:57,960 --> 00:11:01,800
There's a ton of class related features we won't be exploring just yet.

164
00:11:01,860 --> 00:11:05,240
But for now this gives us everything we need in order to get started.

165
00:11:05,400 --> 00:11:10,750
Instead of a person class we're going to create a user's class and instead of methods like get user

166
00:11:10,770 --> 00:11:14,550
description we're going to create methods like the ones we have here.

167
00:11:14,550 --> 00:11:21,450
We're also going to be adding test cases as we go to make sure they work as expected in this video.

168
00:11:21,450 --> 00:11:25,950
We're going to get started adding the users class and in the next one we'll finish it up adding all

169
00:11:25,950 --> 00:11:26,830
of the methods.

170
00:11:26,970 --> 00:11:28,670
For now though we can start defining it.

171
00:11:28,710 --> 00:11:31,740
I am going to comment out the person class down below.

172
00:11:31,860 --> 00:11:36,660
Since we do want it in place as documentation but we're not going to exactly use it inside of the app

173
00:11:36,830 --> 00:11:40,170
will leave it a bit later once we are more comfortable with classes.

174
00:11:40,590 --> 00:11:46,770
Now right here we're going to start by creating our users class using the class keyword class and users

175
00:11:46,830 --> 00:11:48,200
just like this.

176
00:11:48,210 --> 00:11:52,590
We're then going to go ahead and open up and close our curly braces and inside of here we can specify

177
00:11:52,590 --> 00:11:56,490
any methods we like such as the constructor function.

178
00:11:56,490 --> 00:12:04,180
We are going to define a constructor function although they are completely optional when creating classes.

179
00:12:04,180 --> 00:12:08,740
Right here we're going to set up our constructor function by name and then we'll have our arguments

180
00:12:08,740 --> 00:12:11,610
list followed by the opening and closing curly braces.

181
00:12:11,620 --> 00:12:16,720
Now the constructor function for users unlike person is not going to take any arguments when we make

182
00:12:16,720 --> 00:12:18,430
a new users instance.

183
00:12:18,520 --> 00:12:21,720
We just want to start with an empty array of users.

184
00:12:21,790 --> 00:12:26,620
We're going to be making this new instance over inside of server G-S when we first start the app that

185
00:12:26,620 --> 00:12:31,690
is going to happen up top and down below we'll actually be using the methods when someone joins a room

186
00:12:31,690 --> 00:12:35,860
leaves a room or manipulates a room in whatever way they want.

187
00:12:35,860 --> 00:12:43,240
That means that right here all we need to do is set this dot users the users property equal to an empty

188
00:12:43,270 --> 00:12:43,870
array.

189
00:12:43,900 --> 00:12:47,780
And this is going to be the array we've defined right here.

190
00:12:47,800 --> 00:12:52,810
The next thing we're going to do now that we have our constructor function in place is create the add

191
00:12:53,050 --> 00:12:54,490
user method.

192
00:12:54,610 --> 00:13:00,970
We're going to create that right here by defining it like we did forget user description add user just

193
00:13:00,970 --> 00:13:01,850
like this.

194
00:13:01,870 --> 00:13:03,430
We're going to set up the arguments list.

195
00:13:03,430 --> 00:13:07,600
This one is going to take some arguments will specify those in a moment and we're going to open and

196
00:13:07,600 --> 00:13:10,870
close our curly braces for the actual function code.

197
00:13:10,900 --> 00:13:18,250
The three arguments we're going to require is ID name and Rome in order to add a user to the user's

198
00:13:18,250 --> 00:13:18,750
array.

199
00:13:18,820 --> 00:13:24,190
We need those three pieces of information once we have them actually adding them into the list is going

200
00:13:24,190 --> 00:13:25,770
to be really easy.

201
00:13:25,840 --> 00:13:31,330
I'm going to get started by creating a variable user so we can make an object to push on to the array

202
00:13:31,890 --> 00:13:32,630
right here.

203
00:13:32,670 --> 00:13:37,080
Well an ideal property equal to the ID argument and we'll do the same thing for name.

204
00:13:37,090 --> 00:13:43,450
And finally for Rome now we have a user object with those three properties and we can go ahead and push

205
00:13:43,450 --> 00:13:44,730
it on the array.

206
00:13:44,890 --> 00:13:50,560
This dot users dot push to add an object onto the end.

207
00:13:50,560 --> 00:13:55,840
And the thing we're going to be adding on to our array is the user variable.

208
00:13:55,840 --> 00:13:58,600
Now that we have this in place we are basically done.

209
00:13:58,660 --> 00:14:03,600
The last thing I'm going to do is go ahead and return the successfully created user.

210
00:14:03,610 --> 00:14:04,550
Just like this.

211
00:14:04,570 --> 00:14:05,620
And there we go.

212
00:14:05,740 --> 00:14:08,010
Add user is complete.

213
00:14:08,230 --> 00:14:12,330
We're not going to wired up just yet but we can add a test case for add user.

214
00:14:12,460 --> 00:14:19,300
We'll do that over inside of a brand new file called you guessed it users a dot test dot J.

215
00:14:19,300 --> 00:14:25,140
S. in here we'll be able to load in users test it and do whatever else we might need to do.

216
00:14:25,390 --> 00:14:28,000
Now the first step is going to be to actually export users.

217
00:14:28,000 --> 00:14:32,920
Currently we define the class but we do not export it exporting it is going to be the same as exporting

218
00:14:32,950 --> 00:14:33,580
anything else.

219
00:14:33,570 --> 00:14:35,530
There's nothing special there.

220
00:14:35,590 --> 00:14:38,940
Module dot exports.

221
00:14:39,040 --> 00:14:45,070
And we're going to go ahead and export inside of curly braces an object where the users property equals

222
00:14:45,100 --> 00:14:49,940
the users class definition we have above making sure to match that case.

223
00:14:50,080 --> 00:14:54,740
Now that we have this in place we can actually require our class and make new instances of it over inside

224
00:14:54,740 --> 00:14:56,020
of the test file.

225
00:14:56,140 --> 00:15:03,890
Let's get started by loading and expect Konst expect equals require expect and we can also go ahead

226
00:15:03,890 --> 00:15:09,190
and load in our users file Konst using E.S. 60 structuring.

227
00:15:09,200 --> 00:15:16,990
We're going to grab users and we're going to get that via the local file dot Ford slash users.

228
00:15:16,990 --> 00:15:18,050
Awesome.

229
00:15:18,070 --> 00:15:21,450
Now for the moment we're just going to add a test case for adding a user.

230
00:15:21,550 --> 00:15:23,350
We'll make a quick describe that block.

231
00:15:23,410 --> 00:15:27,140
Most of the heavy lifting is going to happen in the next video right here.

232
00:15:27,160 --> 00:15:29,260
We'll describe our users class.

233
00:15:29,260 --> 00:15:33,920
We can then add our aero function and we can go ahead and add a test case.

234
00:15:34,090 --> 00:15:40,680
It inside of quotes should add new user.

235
00:15:40,800 --> 00:15:44,850
I'm going to go ahead and set up the function for this one it's going to be a synchronous function so

236
00:15:44,850 --> 00:15:46,880
there's no need for the Done argument.

237
00:15:46,980 --> 00:15:54,780
And we can create a new instance of what users are users with a lowercase you equals a new users right

238
00:15:54,780 --> 00:15:55,500
here.

239
00:15:55,560 --> 00:16:00,150
Now since we don't take any arguments in the constructor function we're not going to pass any in when

240
00:16:00,150 --> 00:16:03,070
we actually create our instance.

241
00:16:03,120 --> 00:16:08,790
The next thing we're going to do is make a user then we'll be passing its properties to add user making

242
00:16:08,790 --> 00:16:11,730
sure the appropriate thing shows up in the end.

243
00:16:11,730 --> 00:16:15,890
Let's go ahead and make a variable user right here and we'll set that equal to an object.

244
00:16:15,960 --> 00:16:21,840
I'm going to go ahead and set on this object three properties and Id equal to something like 1 to 3

245
00:16:22,260 --> 00:16:25,500
a name property equal to some name like Andrew.

246
00:16:25,500 --> 00:16:28,940
You can go ahead and use your first name and a room name.

247
00:16:29,100 --> 00:16:31,920
I'm going to use the office fans.

248
00:16:32,070 --> 00:16:33,070
Perfect.

249
00:16:33,090 --> 00:16:38,000
Now we have the user in place and we can go ahead and call that method that we just created the add

250
00:16:38,010 --> 00:16:42,950
user method with the three necessary arguments ID name and Rome.

251
00:16:42,990 --> 00:16:50,430
I'm going to store the response in a variable called response user and we'll set it equal to users dot

252
00:16:50,610 --> 00:16:54,180
add user passing in those three pieces of information.

253
00:16:54,240 --> 00:16:57,040
User ID user dot name.

254
00:16:57,060 --> 00:17:03,900
And as the third argument user datt room with the call in place we can now start making our assertions

255
00:17:04,140 --> 00:17:07,860
one assertion we want to make is that the actual users array was updated.

256
00:17:07,890 --> 00:17:12,150
It should've been updated when we called this dot user's dot push.

257
00:17:12,180 --> 00:17:18,750
I'm going to expect that by calling expect we're going to expect something about users ADOT users.

258
00:17:18,830 --> 00:17:20,690
Sorry for the double users.

259
00:17:20,700 --> 00:17:23,900
They're the first user refers to this variable.

260
00:17:23,990 --> 00:17:29,020
And the second one actually accesses the user's array as defined right here.

261
00:17:29,180 --> 00:17:31,460
And then we're going to call two equal.

262
00:17:31,460 --> 00:17:36,170
Remember for arrays and objects you have to use two equal as opposed to B.

263
00:17:36,230 --> 00:17:39,300
We're going to expect it to be an array with just one item.

264
00:17:39,320 --> 00:17:43,430
The item should look just like the user object we have above.

265
00:17:43,430 --> 00:17:49,240
If this passes then we know our user was indeed added to the user's array.

266
00:17:49,250 --> 00:17:52,000
I'm going to go ahead and save the file and shut down node.

267
00:17:52,010 --> 00:17:57,350
Man I'm going to clear the terminal output and run NPM test to make sure our brand new test case is

268
00:17:57,350 --> 00:17:59,040
passing end when I run it.

269
00:17:59,060 --> 00:18:00,690
It does indeed pass.

270
00:18:00,720 --> 00:18:06,330
Right here we have our users block and should add a new user is working as expected.

271
00:18:06,530 --> 00:18:11,060
With this in place we are ready to move on to part 2 where we actually finished the methods as well

272
00:18:11,060 --> 00:18:12,010
as the tests.

273
00:18:12,110 --> 00:18:15,170
Then we can integrate it into our application.

274
00:18:15,290 --> 00:18:21,570
As a quick recap in this one we looked at how we can create classes in year 6 using the class keyword.

275
00:18:21,590 --> 00:18:24,070
We made a person class which was just an example.

276
00:18:24,140 --> 00:18:29,330
And we made our users class which will actually be using throughout the course we looked at adding custom

277
00:18:29,330 --> 00:18:32,720
methods as well as setting up our constructor function.

278
00:18:32,900 --> 00:18:36,080
As I just mentioned we'll be continuing with this in the next one part two.

279
00:18:36,080 --> 00:18:38,440
So stay tuned I'll see you then.

