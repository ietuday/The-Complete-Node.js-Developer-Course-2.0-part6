1
00:00:00,270 --> 00:00:05,310
Now that we have our customer event listeners any imitators in place it's time to actually wire up the

2
00:00:05,310 --> 00:00:06,370
message system.

3
00:00:06,450 --> 00:00:11,700
So when one user sends a message to the server it actually gets sent to every connected user.

4
00:00:11,700 --> 00:00:17,550
If I have two tabs open and I emit a create message event from one tab I should see the message arrive

5
00:00:17,550 --> 00:00:18,700
in the second one.

6
00:00:18,720 --> 00:00:23,400
Now to test things locally we're going to be using separate tabs but the same would work on Heroku with

7
00:00:23,400 --> 00:00:25,620
separate browsers on separate networks.

8
00:00:25,680 --> 00:00:28,350
As long as everyone has the same you are all in their browser.

9
00:00:28,350 --> 00:00:32,180
They are going to be connected regardless of which machine they're on.

10
00:00:32,250 --> 00:00:35,450
Now obviously for local hosts we don't have that privilege.

11
00:00:35,460 --> 00:00:40,590
But as we deployed to Heroku which we will be doing in this video we'll be able to test this out between

12
00:00:40,590 --> 00:00:45,480
say your phone and the browser running on your machine to get started.

13
00:00:45,480 --> 00:00:48,300
We're going to update the create message listener.

14
00:00:48,300 --> 00:00:52,360
Currently all we do is log the data to the screen instead of just logging it.

15
00:00:52,380 --> 00:00:57,030
We actually want to emit a new event a new message event to everybody.

16
00:00:57,030 --> 00:01:03,480
So every single connected user gets the message that was sent from a specific user in order to get that

17
00:01:03,480 --> 00:01:04,000
done.

18
00:01:04,020 --> 00:01:11,580
We're going to call a method on I O I know dot emit socket data it emits an event to a single connection

19
00:01:11,850 --> 00:01:16,570
i o data emit emits an event to every single connection here.

20
00:01:16,580 --> 00:01:23,220
We're going to emit the event new message specifying it as our first argument and the second argument

21
00:01:23,250 --> 00:01:24,580
as with socket data.

22
00:01:24,590 --> 00:01:27,020
MIT is the data you want to send.

23
00:01:27,210 --> 00:01:31,220
Now we know we're getting a from property and a Text property from the client.

24
00:01:31,230 --> 00:01:32,630
Those appear right here.

25
00:01:32,730 --> 00:01:39,080
Which means what we need to do is pass those along setting from equal to message dot from and setting

26
00:01:39,090 --> 00:01:42,920
text equal to a message dot text.

27
00:01:42,950 --> 00:01:48,030
Now alongside of Freman text we're also going to specify a created app property and this is going to

28
00:01:48,030 --> 00:01:53,640
get generated by the server to prevent a specific client from spoofing when a message was created.

29
00:01:54,670 --> 00:01:58,600
Created that gets set equal to a new date.

30
00:01:59,110 --> 00:02:04,770
And we're going to call the get time method to get that time stamp back which we've done before.

31
00:02:04,960 --> 00:02:08,210
Now that we have this in place we actually have messaging wired up.

32
00:02:08,290 --> 00:02:14,200
We can go ahead and remove our emit calls from both server dot J S and index dot.

33
00:02:14,220 --> 00:02:20,320
J.S. Right here make sure to save both files in with this in place we can go ahead and test this by

34
00:02:20,350 --> 00:02:25,090
opening up two connections to the server and emitting some events.

35
00:02:25,090 --> 00:02:30,160
I'm going to start up a server inside of the terminal using node Amman's server forward slash server

36
00:02:30,190 --> 00:02:38,740
J.S. and inside of the browser we can now open up two tabs both at localhost three thousand for both

37
00:02:38,730 --> 00:02:43,500
tabs I am going to open up the developer tools since that's currently the graphic user interface for

38
00:02:43,500 --> 00:02:44,560
our application.

39
00:02:44,580 --> 00:02:46,170
We don't have any forms just yet.

40
00:02:46,290 --> 00:02:51,600
Which means we need to use the council to run some statements we'll do the same thing for a second tab

41
00:02:51,870 --> 00:02:57,360
and notice that as soon as we open that second tab we get a second new user connected message in the

42
00:02:57,360 --> 00:02:57,990
terminal.

43
00:02:57,990 --> 00:03:03,060
You should be seeing this message when you have your two tabs open.

44
00:03:03,140 --> 00:03:08,120
Now that we have our two tabs open we can go ahead and emit a create message event from either one.

45
00:03:08,120 --> 00:03:14,450
I'm going to emit it from the second one by calling socket Datti MIT emitting a custom event.

46
00:03:14,450 --> 00:03:18,830
The event name is create message and it takes those two props.

47
00:03:18,830 --> 00:03:24,740
We just discussed the from property and the taxed property both of which I'm going to specify in this

48
00:03:24,800 --> 00:03:28,160
object from is going to get set equal to my first name.

49
00:03:28,190 --> 00:03:32,540
Andrew and text is going to get set equal to inside of quotes.

50
00:03:32,540 --> 00:03:36,400
This should work with this in place.

51
00:03:36,410 --> 00:03:38,650
I can now admit my event from the browser.

52
00:03:38,780 --> 00:03:43,880
It's going to go to the server which is going to send the message to every connected user including

53
00:03:43,880 --> 00:03:47,150
the currently connected user who sent the message.

54
00:03:47,270 --> 00:03:51,800
I'm going to hit enter it fires it off and you see we get new message right here we have the message

55
00:03:51,800 --> 00:03:52,650
we just created.

56
00:03:52,760 --> 00:03:59,030
But the cool thing is that over in the other tab We also have the message a message from one user reached

57
00:03:59,210 --> 00:04:03,490
a user in a separate tab which is fantastic.

58
00:04:03,680 --> 00:04:08,870
With this in place we don't have a very basic messaging system set up a user emits an event.

59
00:04:08,870 --> 00:04:14,210
It goes to the server and the server sends it to everyone else who is connected with this in place.

60
00:04:14,210 --> 00:04:17,800
I'd like to make a commit and deployed to Heroku so we can test it out.

61
00:04:17,810 --> 00:04:18,500
We're not done yet.

62
00:04:18,500 --> 00:04:22,970
We are going to set up a few more things and do a challenge but there's no reason we can't commit twice

63
00:04:22,970 --> 00:04:24,350
in one video.

64
00:04:24,350 --> 00:04:29,840
If I run get status I see I have my two changed files as expected I can then run get commit with the

65
00:04:29,840 --> 00:04:38,720
AM flag to specify a message for this commit something like emit new message on create message will

66
00:04:38,720 --> 00:04:40,070
get the job done.

67
00:04:40,100 --> 00:04:42,100
I can then go ahead and actually make the commit.

68
00:04:42,110 --> 00:04:48,320
Pushing it up to both get hub and Heroku get push is going to get it on get hub and get push Heroku

69
00:04:48,500 --> 00:04:53,870
master is going to deploy it alive to the Web and you'll be able to open up our chat application and

70
00:04:53,870 --> 00:05:00,140
make sure it works regardless of the browser computer or any other variable.

71
00:05:00,140 --> 00:05:00,630
Here we go.

72
00:05:00,650 --> 00:05:02,320
We are compressing and launching the app.

73
00:05:02,320 --> 00:05:04,010
It looks like everything is done.

74
00:05:04,070 --> 00:05:07,680
I'm going to go ahead and use Heroku open to open it up.

75
00:05:07,700 --> 00:05:11,590
This is going to open it up in my default browser and right you see we have.

76
00:05:11,590 --> 00:05:14,090
Welcome to the chat application.

77
00:05:14,090 --> 00:05:19,670
Now to demo this what I'm going to do is open up a separate browser window open up Firefox and type

78
00:05:19,670 --> 00:05:21,150
in the exact same.

79
00:05:21,170 --> 00:05:27,450
You are all going to copy this you Aurel then I'll grab the Firefox browser and making it smaller so

80
00:05:27,450 --> 00:05:32,170
we can quickly switch between the two opening up the Heroku app here.

81
00:05:32,190 --> 00:05:36,100
Now Firefox also has developer tools available via this menu.

82
00:05:36,150 --> 00:05:42,840
Here we have a developer section and we're looking for the web at cons. Now that we have this open we

83
00:05:42,840 --> 00:05:47,630
can go into the developer tools for our chrome tab connected to the Heroku application.

84
00:05:47,760 --> 00:05:51,770
And what we're going to do is he met an event using socket daily MIT.

85
00:05:51,810 --> 00:05:55,640
We're going to even get a create a message event.

86
00:05:55,650 --> 00:05:59,380
We're going to specify our custom properties inside of the object.

87
00:05:59,430 --> 00:06:06,050
We can go ahead and have from set to like and we can set the text equal to Heroku.

88
00:06:06,060 --> 00:06:09,830
Now when I go ahead and emit this that everything should work as expected.

89
00:06:09,870 --> 00:06:12,640
Calling socket data emit emitting create message.

90
00:06:12,660 --> 00:06:18,170
We have our data which means it's going to go to the Heroku server which will send it over to Firefox.

91
00:06:18,210 --> 00:06:19,360
I'm going to send this off.

92
00:06:19,350 --> 00:06:20,930
We get the new message right here.

93
00:06:21,000 --> 00:06:23,970
And over inside of Firefox we also have the message.

94
00:06:24,010 --> 00:06:24,900
It's from Mike.

95
00:06:24,900 --> 00:06:29,560
The text is Heroku and we have the created at time stamp added by our server.

96
00:06:29,640 --> 00:06:35,460
And with this in place we have a messaging system that only working locally but working on Heroku which

97
00:06:35,460 --> 00:06:40,800
means anybody in the world can visit this you are l they can emit the event and everyone else connected

98
00:06:40,830 --> 00:06:44,640
is going to see that event in the council.

99
00:06:44,700 --> 00:06:49,380
Now that we've tested it out across browser I am going to close down Firefox and we're going to move

100
00:06:49,380 --> 00:06:55,580
on to the second part of this video which is talking about a different way to emit events.

101
00:06:55,650 --> 00:07:01,110
Some events you want to send to everybody a new message should go to every single user including the

102
00:07:01,110 --> 00:07:04,560
one who sent it so it can show up inside of the list of messages.

103
00:07:04,680 --> 00:07:08,440
Other events on the other hand should only go to other people.

104
00:07:08,460 --> 00:07:14,950
So if user one admits an event it shouldn't go back to user want it should only go to user 2 and 3.

105
00:07:15,120 --> 00:07:20,430
A good example of this is when a user joins a chat room I want to print a little message like Andrew

106
00:07:20,460 --> 00:07:27,000
joined when someone joins and I want to print a message like welcome Andrew for the actual user who

107
00:07:27,120 --> 00:07:27,790
joined.

108
00:07:27,810 --> 00:07:32,880
So in this tab I would see welcome Andrew and over here I would see Andrew joined in order to get that

109
00:07:32,880 --> 00:07:33,240
done.

110
00:07:33,240 --> 00:07:38,330
We're going to look at a different way to meet events in the server.

111
00:07:38,350 --> 00:07:41,170
This is going to get done via broadcasting.

112
00:07:41,170 --> 00:07:47,460
Broadcasting is the term for a meeting and event to everybody but one specific user I'm going to start

113
00:07:47,460 --> 00:07:50,150
up the server once again using gnomon server.

114
00:07:50,160 --> 00:07:51,760
Forward slash server.

115
00:07:51,820 --> 00:07:56,720
J.S. and over inside of atom we can now tweak how we emit the event right here.

116
00:07:56,890 --> 00:08:01,420
Now this is going to be the final way we do things but we'll play around with broadcasting as well which

117
00:08:01,420 --> 00:08:05,920
means I'm going to comment this out as opposed to removing it to broadcast.

118
00:08:05,920 --> 00:08:08,530
We have to specify the individual socket.

119
00:08:08,530 --> 00:08:13,340
This lets the socket IO library know which user shouldn't get the event.

120
00:08:13,390 --> 00:08:18,730
In this case the user that we call right here is not going to get the event everyone else will.

121
00:08:18,790 --> 00:08:25,330
Now we need to call socket daat broadcast broadcast as an object that has its own emet function and

122
00:08:25,330 --> 00:08:29,530
its the exact same syntax as I o data MIT or socket data.

123
00:08:29,620 --> 00:08:32,250
The big difference is who it gets sent to.

124
00:08:32,320 --> 00:08:37,900
This is going to send the event to everybody but this socket which means if I fire a create message

125
00:08:37,900 --> 00:08:43,860
event the new message event will fire to everybody but myself and thats exactly what we can do here.

126
00:08:43,870 --> 00:08:48,690
Its going to be identical which means we can go ahead and pass in the message event name.

127
00:08:48,820 --> 00:08:50,530
The arguments are going to be identical.

128
00:08:50,530 --> 00:08:55,180
The first one is going to be the event name new message and the other one is going to be the object

129
00:08:55,180 --> 00:09:01,360
with our properties from equals message dot from text equals message dot text.

130
00:09:01,480 --> 00:09:11,080
And last up we have created at equal to a new time stamp new date dot yet time with this in place we

131
00:09:11,080 --> 00:09:14,570
are not going to see the messages we send but everybody else will.

132
00:09:14,650 --> 00:09:17,240
We can prove this by heading over to google chrome.

133
00:09:17,260 --> 00:09:23,720
I'm going to give both tabs a refresh and from the second tab once again we are going to emit an event

134
00:09:23,950 --> 00:09:29,260
and we can actually use the up arrow key inside of the Web Developer console to rerun one of our previous

135
00:09:29,260 --> 00:09:34,720
commands and that's exactly what I'm going to do here we're emitting a create message event with a from

136
00:09:34,720 --> 00:09:37,020
property set to and you add a text equal to.

137
00:09:37,030 --> 00:09:38,140
This should work.

138
00:09:38,320 --> 00:09:43,640
If I hit enter to send this off you're going to notice that this tab no longer receives the message.

139
00:09:43,750 --> 00:09:49,870
But if I go to localhost three 3000 we are getting new message showing up with the message data.

140
00:09:49,870 --> 00:09:57,040
This is because tab to broadcasted the event which means it only got received by other connections such

141
00:09:57,040 --> 00:10:04,430
as tap one or any other connected user with broadcasting in place it's time to set up your challenge.

142
00:10:04,570 --> 00:10:08,440
Now as I mentioned we're not going to actually use broadcast in this context.

143
00:10:08,440 --> 00:10:09,920
We're going to comment this out.

144
00:10:09,940 --> 00:10:15,050
So you have it for reference during the challenge and we're going to uncomment our old code.

145
00:10:15,070 --> 00:10:18,450
This is going to be the final way we emit messages.

146
00:10:18,460 --> 00:10:22,030
Your challenge is going to be to emit two events right here right.

147
00:10:22,030 --> 00:10:29,080
When a user connects you're going to first call socket emit to emit a message to the user who joined

148
00:10:29,380 --> 00:10:32,870
your message should come from the admin from admin.

149
00:10:33,910 --> 00:10:41,320
And the text should say something like welcome to the chat app.

150
00:10:41,540 --> 00:10:45,490
Now along with Sacket data you're also going to call socket.

151
00:10:45,500 --> 00:10:47,800
Broadcast dot emit.

152
00:10:47,970 --> 00:10:52,460
This is going to get sent to everybody but the user who joined which means you can go ahead and set

153
00:10:52,460 --> 00:10:59,520
from equal to admin once again and you can set text equal to new user joint.

154
00:10:59,570 --> 00:11:04,490
This means that when we join a chat room we're going to see a message greeting us and everyone else

155
00:11:04,490 --> 00:11:09,290
is going to see a message letting them know that someone else joined both of these events are going

156
00:11:09,290 --> 00:11:13,170
to be new message events just like we met one right here.

157
00:11:13,190 --> 00:11:17,690
We're going to have to specify from which is admen the text which is whatever I said it should be and

158
00:11:17,690 --> 00:11:19,400
created at.

159
00:11:19,400 --> 00:11:23,670
Go ahead and add those two statement calls here then go ahead and test it in the browser.

160
00:11:23,810 --> 00:11:27,010
Close your tabs open one then open a second one.

161
00:11:27,050 --> 00:11:32,570
The second one it should see the greeting and the first one should see the alert that a new user joined.

162
00:11:32,600 --> 00:11:34,040
Take a moment to knock this out.

163
00:11:34,040 --> 00:11:36,230
Test it in when you're done click play.

164
00:11:37,610 --> 00:11:43,400
Hopefully that went well and you were able to get both of those calls working as expected to kick things

165
00:11:43,400 --> 00:11:43,640
off.

166
00:11:43,640 --> 00:11:45,940
We're going to fill out the first call.

167
00:11:45,950 --> 00:11:53,520
This is a call to socket data MIT and this call is going to be responsible for greeting the individual

168
00:11:53,520 --> 00:11:54,300
user.

169
00:11:54,300 --> 00:12:00,660
We are still going to send an event of a type new message and we are still going to send the exact same

170
00:12:00,660 --> 00:12:06,000
data from text and created at the only difference here is that we're going to be generating all of the

171
00:12:06,000 --> 00:12:10,040
properties as opposed to getting some of them from the user like we do below.

172
00:12:10,470 --> 00:12:14,570
Let's get started with from this one is going to be from the admin.

173
00:12:14,640 --> 00:12:20,880
Any time we send a message via the server we'll call that admin and the text is going to be our little

174
00:12:20,880 --> 00:12:21,720
message.

175
00:12:22,380 --> 00:12:25,550
Welcome to the chat app.

176
00:12:25,680 --> 00:12:27,390
Later on we'll greet them by name.

177
00:12:27,400 --> 00:12:28,920
We don't have the information for the moment.

178
00:12:28,920 --> 00:12:33,780
So we're going to stick with a generic greeting with this call in place we can remove the comment and

179
00:12:33,780 --> 00:12:35,420
we can move onto the second one.

180
00:12:35,430 --> 00:12:40,780
This is our broadcast call that's going to alert every other user except for the one who joined that

181
00:12:40,800 --> 00:12:43,560
someone new is here to get that done.

182
00:12:43,560 --> 00:12:52,260
We're going to use socket dot broadcast Umit and we're going to emit a new message event providing our

183
00:12:52,260 --> 00:12:56,620
props from once again is going to get set equal to the string admin.

184
00:12:56,730 --> 00:12:59,790
The text is going to get set equal to our little message.

185
00:12:59,790 --> 00:13:06,210
New User joined and later on will also be adding a user name here but for now we'll keep it generic

186
00:13:06,480 --> 00:13:08,880
and last up is created at which I forgot.

187
00:13:08,880 --> 00:13:17,840
Up above created app is going to get set equal to a new date by calling the date get time method with

188
00:13:17,840 --> 00:13:19,410
the date in place for this call.

189
00:13:19,420 --> 00:13:21,330
We'll also add it for the one above.

190
00:13:21,640 --> 00:13:22,410
Excellent.

191
00:13:22,540 --> 00:13:26,670
Now we can remove our comment for the second call and we are done.

192
00:13:26,680 --> 00:13:29,990
The challenge everything should work as expected.

193
00:13:30,010 --> 00:13:34,540
The next thing you needed to do was test out that all of this is working as expected by heading into

194
00:13:34,540 --> 00:13:35,350
the browser.

195
00:13:35,350 --> 00:13:37,620
There's a couple ways you could have done it as long as you got it done.

196
00:13:37,620 --> 00:13:38,890
It doesn't really matter.

197
00:13:39,040 --> 00:13:44,500
I'm going to choose to close both of my old tabs I'm then going to open up the developer tools before

198
00:13:44,500 --> 00:13:47,270
ever visiting the page.

199
00:13:47,320 --> 00:13:49,410
Then we can go to localhost three thousand.

200
00:13:49,410 --> 00:13:51,550
And we should see a little message right here.

201
00:13:51,550 --> 00:13:56,230
Here we see a new message welcome into the chat app printing which is fantastic.

202
00:13:56,230 --> 00:13:59,770
Next up we want a test that the broadcast is working as expected.

203
00:13:59,770 --> 00:14:04,480
For the second tab I'm also going to open up the developer tools.

204
00:14:04,590 --> 00:14:09,120
I'm going to go to localhost three thousand once again and once again we get our little message.

205
00:14:09,120 --> 00:14:10,430
Welcome to the chat app.

206
00:14:10,440 --> 00:14:16,770
If we go to the first tab We also see that a new user joined and this is fantastic.

207
00:14:16,770 --> 00:14:23,160
With this in place we don't have a rudimentary but working messaging system which is a great place to

208
00:14:23,160 --> 00:14:24,050
start.

209
00:14:24,060 --> 00:14:28,550
We're going to continue on in the next video adding more features and building out the UI.

210
00:14:28,650 --> 00:14:32,700
But before we do that I am going to make a commit to save these changes.

211
00:14:32,730 --> 00:14:36,450
Let's go ahead and shut down the server and use get status.

212
00:14:36,450 --> 00:14:42,560
Then we can go ahead and run it get commit with the flag and specify a message right here.

213
00:14:42,630 --> 00:14:49,440
Greet new user and alert others.

214
00:14:49,680 --> 00:14:53,600
Once the commit is in place we can use get pushed to push it up to get a job.

215
00:14:53,610 --> 00:14:58,590
There's no need to deploy to Heroku right now although you could easily deploy and test if you feel

216
00:14:58,590 --> 00:14:59,920
so inclined.

217
00:14:59,970 --> 00:15:01,570
With this in place we are now done.

218
00:15:01,590 --> 00:15:03,230
I will see you in the next one

