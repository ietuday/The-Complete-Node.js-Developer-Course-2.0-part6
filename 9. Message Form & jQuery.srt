1
00:00:00,270 --> 00:00:03,460
In this video you're going to add a form field to your index.

2
00:00:03,510 --> 00:00:08,340
HCM el file this is going to render an input field and a button to the screen and a user is going to

3
00:00:08,340 --> 00:00:13,950
be able to interact with that as opposed to having to call socket dot emit from the developer tools

4
00:00:14,130 --> 00:00:17,020
which is not a sustainable option for real users.

5
00:00:17,010 --> 00:00:19,410
This only works for us developers.

6
00:00:19,410 --> 00:00:24,150
Now in order to get started we're going to be editing index dot HTL and then we're going to move into

7
00:00:24,210 --> 00:00:25,680
index dot J.S..

8
00:00:25,860 --> 00:00:29,270
We're going to add a listener that's going to wait for the form to be submitted.

9
00:00:29,340 --> 00:00:36,300
And inside of that listener call back we are going to fire socket Dummett with the data typed in the

10
00:00:36,300 --> 00:00:37,320
field.

11
00:00:37,320 --> 00:00:42,540
We're also going to take a moment to render all incoming messages to the screen at the end of this video

12
00:00:42,540 --> 00:00:46,610
will have a ugly yet working chat application.

13
00:00:46,620 --> 00:00:52,110
Now before we do any of that we are going to be using a library called the Jay Querrey to do DOM manipulation

14
00:00:52,350 --> 00:00:57,360
which means that we want to be able to do stuff with our rendered DML but we want to be able to do that

15
00:00:57,360 --> 00:00:59,220
from our javascript file.

16
00:00:59,250 --> 00:01:04,800
We're going to use Jey query to make that a lot easier in terms of cross browser compatibility to grab

17
00:01:04,800 --> 00:01:10,660
this library we're going to head over to Google Chrome go to Jay Querrey dot com and you can grab the

18
00:01:10,660 --> 00:01:11,990
most recent version.

19
00:01:12,070 --> 00:01:13,970
The version is not going to matter for here.

20
00:01:14,020 --> 00:01:17,740
We're using very basic features available in all versions.

21
00:01:17,740 --> 00:01:19,510
I'm grabbing the most recent version.

22
00:01:19,510 --> 00:01:20,650
Three point one.

23
00:01:20,650 --> 00:01:21,710
Point zero.

24
00:01:21,820 --> 00:01:25,570
Then I'm going to go ahead and download decompressed production version.

25
00:01:25,570 --> 00:01:28,140
Am I right clicking and opening it in a new tab.

26
00:01:28,150 --> 00:01:34,310
Here we have the actual javascript that we want to load in to our application which means we can Right-Click

27
00:01:34,420 --> 00:01:36,100
some sort of empty area.

28
00:01:36,300 --> 00:01:44,980
Save As and go into our projects folder desktop node A Chat App public J.S. and inside of japes I'm

29
00:01:44,980 --> 00:01:49,680
going to create a new directory called libs where we'll store third party javascript.

30
00:01:49,750 --> 00:01:54,340
We're going to be working with a few more client side javascript libraries throughout the section so

31
00:01:54,340 --> 00:01:56,970
it's nice to create a folder to stay organized.

32
00:01:57,220 --> 00:01:58,650
I'm going to save that in there.

33
00:01:58,720 --> 00:02:01,300
Close the tab as well as the downloads area.

34
00:02:01,390 --> 00:02:08,740
And now we can go ahead and load it into index dot h DML and at our forum down here just between socket

35
00:02:08,770 --> 00:02:16,230
I O an index Scott J.S. we're going to add a new script tag to load and Jay Querrey we've got to specify

36
00:02:16,230 --> 00:02:23,250
that source attribute with the path to the file forward slash J.S. forward slash libs followed by a

37
00:02:23,250 --> 00:02:32,920
forward slash and the file name Jay Querrey hyphen three point one point zero dot men dot J.

38
00:02:32,950 --> 00:02:34,540
S awesome.

39
00:02:34,550 --> 00:02:40,060
And now let's go ahead and set up our form at TAG this is going to render our form fields to the browser.

40
00:02:40,160 --> 00:02:45,470
If you're not familiar with these tags that is perfectly fine simply follow along and I'll explain as

41
00:02:45,470 --> 00:02:46,190
we go.

42
00:02:46,250 --> 00:02:48,220
First up we need a form tag.

43
00:02:48,350 --> 00:02:51,510
This creates a form that submittal by the user.

44
00:02:51,530 --> 00:02:54,790
This is exactly what we're going to use to submit our messages.

45
00:02:54,970 --> 00:02:57,720
And on this form tag we're going to add one attribute.

46
00:02:57,770 --> 00:03:03,890
It's the ID attribute which lets us give this element a unique identifier making it really easy to target

47
00:03:03,890 --> 00:03:04,790
without javascript.

48
00:03:04,790 --> 00:03:10,580
A bit later on remember we're going to want to add a listener to this element when the form gets submitted.

49
00:03:10,580 --> 00:03:14,510
We're going to want to do something in our javascript file notably but we're going to want to do is

50
00:03:14,570 --> 00:03:16,740
call Sacket dot emit.

51
00:03:16,940 --> 00:03:22,600
I'm going to set id equal to inside of quotes message hyphen form.

52
00:03:22,820 --> 00:03:27,530
Now that we have a form tag complete we can add some tags inside of it to get started we're going to

53
00:03:27,530 --> 00:03:30,540
add a button which is going to appear at the bottom of the form.

54
00:03:30,650 --> 00:03:37,070
This button on click is going to submit the form on opening and closing my tag and just inside I can

55
00:03:37,070 --> 00:03:39,360
type whatever text I want to appear on the button.

56
00:03:39,410 --> 00:03:42,820
I'm going to go with send now that we have our button in place.

57
00:03:42,830 --> 00:03:45,900
The only thing we need to do is add the little text field.

58
00:03:45,920 --> 00:03:50,050
This is going to be the text field where the user types their message.

59
00:03:50,120 --> 00:03:55,250
This is going to require us to use an input tag and instead of opening and closing an input tag like

60
00:03:55,250 --> 00:04:00,470
this we're going to use the self-closing syntax because we don't need to actually put anything inside

61
00:04:00,470 --> 00:04:04,050
of it like we do for a button here or like we do for form.

62
00:04:04,130 --> 00:04:07,820
Here we are going to be adding quite a few attributes on input.

63
00:04:07,820 --> 00:04:12,830
First step name we want to give this field a unique name something like.

64
00:04:12,830 --> 00:04:15,330
Message is going to get the job done.

65
00:04:15,350 --> 00:04:17,560
We also want to go ahead and set the type.

66
00:04:17,570 --> 00:04:22,670
There's a lot of different types for input tags types could include something like a checkbox or in

67
00:04:22,670 --> 00:04:28,910
our case the type we're going to use inside of quotes is text or the last attribute we're going to add

68
00:04:28,910 --> 00:04:31,180
to input is called placeholder.

69
00:04:31,250 --> 00:04:35,000
We're going to set this value equal to inside of quotes a string.

70
00:04:35,000 --> 00:04:40,070
This string is going to get rendered in the field in a light grey before the user actually enters a

71
00:04:40,070 --> 00:04:41,370
value.

72
00:04:41,470 --> 00:04:45,870
I'm going to tell the user that this is where a message goes with this in place.

73
00:04:45,960 --> 00:04:52,450
We can actually test out our forms rendering by starting up the server using gnomon server forward slash

74
00:04:52,520 --> 00:04:53,120
server.

75
00:04:53,120 --> 00:04:55,940
J.S. and going to local host 3000.

76
00:04:56,240 --> 00:04:57,280
The server is up.

77
00:04:57,320 --> 00:05:02,090
I'm going to visit Google Chrome go to localhost three thousand and you'll notice something kind of

78
00:05:02,090 --> 00:05:02,680
cool.

79
00:05:02,690 --> 00:05:07,390
I haven't actually visited that al yet but you can see that the connection has already occurred.

80
00:05:07,400 --> 00:05:10,770
Chrome does some lazy loading if it thinks you're going to go to a u r l.

81
00:05:10,820 --> 00:05:12,350
It's actually going to make the request.

82
00:05:12,350 --> 00:05:15,050
So when I do visit it it loads even faster.

83
00:05:15,050 --> 00:05:17,540
Now if I visit localhost three thousand What do we get.

84
00:05:17,540 --> 00:05:18,750
We get our little form.

85
00:05:18,800 --> 00:05:23,220
We can type in a message like test and we can send it off now by default.

86
00:05:23,240 --> 00:05:25,030
Forms are very old school.

87
00:05:25,070 --> 00:05:30,470
If I try to submit this form it's actually going to go through a full page refresh then it's going to

88
00:05:30,530 --> 00:05:34,930
add to the data like our message text as a query string you are l.

89
00:05:35,000 --> 00:05:36,590
This is not what we want to do.

90
00:05:36,620 --> 00:05:40,210
We want to run some custom javascript on forms submit.

91
00:05:40,310 --> 00:05:45,970
So we're going to attach a custom event listener and override the default behavior to get that done

92
00:05:45,980 --> 00:05:51,050
we are going to have to use J query and we're going to need to select this form field before we dive

93
00:05:51,050 --> 00:05:52,140
into index Dot.

94
00:05:52,180 --> 00:05:57,590
Yes let's take a quick moment to talk about how we can use Jey query to select elements J query which

95
00:05:57,590 --> 00:06:00,730
is accessible via the J query variable with an uppercase.

96
00:06:00,740 --> 00:06:08,470
Q takes as its argument your selector right here we're going to add a string and we can select our elements.

97
00:06:08,480 --> 00:06:14,090
For example if we want to select all the paragraph tags on the screen we would type P in here.

98
00:06:14,090 --> 00:06:18,590
These are really similar to CSSA selectors if you're familiar with them and right here we've selected

99
00:06:18,590 --> 00:06:20,130
our paragraph tag.

100
00:06:20,210 --> 00:06:25,730
I could also go ahead and select all of the divs inside of my program or I could select elements by

101
00:06:25,730 --> 00:06:27,050
ID or class.

102
00:06:27,080 --> 00:06:30,880
And that's what we're going to do in order to select an element by ID.

103
00:06:30,920 --> 00:06:35,840
We first start with the pound sign and then we type the name and our case we have a form called Message

104
00:06:36,200 --> 00:06:37,230
hyphen form.

105
00:06:37,310 --> 00:06:40,630
And if I fire this off we do indeed get that back.

106
00:06:40,640 --> 00:06:45,800
This is going to allow us to add an event listener over inside of index.

107
00:06:45,880 --> 00:06:52,730
Yes we're going to add that exact same selector near the bottom Jay query calling it with our selector

108
00:06:53,060 --> 00:06:59,150
pound sign message hyphen form and now we're going to add an event listener and the event listener is

109
00:06:59,150 --> 00:07:04,520
going to look pretty similar to our socket I O event listeners we are going to be calling on and we

110
00:07:04,520 --> 00:07:10,910
are going to be providing those two arguments the event name inside of quotes submit and a function.

111
00:07:10,910 --> 00:07:15,200
This function is going to fire when a user tries to submit the form.

112
00:07:15,200 --> 00:07:21,280
Now unlike our socket I O event listeners we are going to get one argument right here.

113
00:07:21,320 --> 00:07:25,500
The event argument and we are going to need to access this.

114
00:07:25,640 --> 00:07:30,920
We're going to need to access this event argument in order to override that default behavior that causes

115
00:07:30,920 --> 00:07:33,290
that page refresh right here.

116
00:07:33,410 --> 00:07:41,520
We're going to call the DOT prevent default prevent default prevents the default behavior for the event

117
00:07:41,690 --> 00:07:46,310
and by default a submitter that goes through that page refresh process.

118
00:07:46,310 --> 00:07:51,560
We can go ahead and test that everything is working by going into Google Chrome giving the page a refresh

119
00:07:52,350 --> 00:07:55,230
also going to remove the query string from the U r l.

120
00:07:55,250 --> 00:07:58,060
Now we can type in some sort of message like test.

121
00:07:58,060 --> 00:08:03,570
Hit send and you can see that nothing happens nothing happens because we overrode the default behavior.

122
00:08:03,590 --> 00:08:10,610
All we need to do to make something happen is call socket dot emit.

123
00:08:10,700 --> 00:08:13,690
We're going to emit the create message event right here.

124
00:08:14,750 --> 00:08:19,820
Create message and we're going to go ahead and provide our data.

125
00:08:19,880 --> 00:08:24,550
Now the name from field for now is just going to be user in upper case.

126
00:08:24,590 --> 00:08:28,700
We're going to leave this as anonymous for the moment although we will be updating that a bit later

127
00:08:28,820 --> 00:08:29,900
in the section.

128
00:08:29,900 --> 00:08:34,760
Now the textfield this is going to come from the form we're going to want to add a selector and we're

129
00:08:34,760 --> 00:08:37,010
going to want to get the value back.

130
00:08:37,220 --> 00:08:39,890
Let's go ahead and do that using Jay Querrey.

131
00:08:39,940 --> 00:08:45,490
We're going to call Jay Coria once again and we're going to select this input right here.

132
00:08:45,490 --> 00:08:51,210
We can go ahead and selected by its name name equals message in order to get that done.

133
00:08:51,220 --> 00:08:57,110
We're going to open up brackets like this setting name equal to message.

134
00:08:57,150 --> 00:09:01,900
This is going to select any element that has a name attribute equal to a message which is just our one

135
00:09:02,190 --> 00:09:06,140
and we can go ahead and get its value using the dot Vau method.

136
00:09:06,280 --> 00:09:09,460
No semi-colon required since we're inside of object creation.

137
00:09:09,700 --> 00:09:15,970
With this in place we can now go ahead and add our callback function for our knowledge amn't for the

138
00:09:15,970 --> 00:09:18,640
moment it doesn't really do anything but that's perfectly fine.

139
00:09:18,640 --> 00:09:24,010
We have to add it in order to fulfill the acknowledgment setup we currently have in place now that we

140
00:09:24,010 --> 00:09:25,620
have our event listener set up.

141
00:09:25,620 --> 00:09:27,230
Let's go ahead and test this out.

142
00:09:27,460 --> 00:09:33,240
I'm going to head back into Krumm give the page a refresh type in some message like this should work.

143
00:09:34,580 --> 00:09:38,190
And when we submit the form we should see it show up over here as a new message.

144
00:09:38,270 --> 00:09:42,950
I'm going to send it off and you can see that right inside of the terminal we have a user sending this

145
00:09:42,950 --> 00:09:43,660
should work.

146
00:09:43,700 --> 00:09:50,210
And it also shows up right here the same thing is true if I open up a second connection I'm going to

147
00:09:50,210 --> 00:09:54,310
open up the developer tools so he can see exactly what's happening behind the scenes.

148
00:09:54,350 --> 00:09:58,950
I'm going to type some message like from tab to send it off.

149
00:09:59,090 --> 00:10:01,760
And we should see it over in tab 1 and we do.

150
00:10:01,760 --> 00:10:02,330
Perfect.

151
00:10:02,330 --> 00:10:04,370
Everything is working as expected.

152
00:10:04,370 --> 00:10:06,410
Now obviously the set is not complete.

153
00:10:06,410 --> 00:10:10,820
We want to wipe that form value after we send the message and we want to take care of a few other you

154
00:10:10,820 --> 00:10:11,680
I related things.

155
00:10:11,690 --> 00:10:14,290
But for now it is working pretty well.

156
00:10:15,130 --> 00:10:20,700
With a basic form in place the second thing we're going to do is render incoming messages to the screen.

157
00:10:20,710 --> 00:10:25,500
Now once again it is going to look pretty ugly but it will get the job done to get this done.

158
00:10:25,510 --> 00:10:29,610
We have to create a place inside of our Dom inside of our index.

159
00:10:29,640 --> 00:10:33,220
H Tim L file where we can render the messages.

160
00:10:33,220 --> 00:10:38,780
Once again we're going to give this element a idea that we can easily access over inside of index just

161
00:10:38,920 --> 00:10:41,320
so we can render those messages.

162
00:10:41,320 --> 00:10:47,900
First up what we're going to do is create a ordered list by creating an AOL tag just like this.

163
00:10:47,920 --> 00:10:53,920
This list is going to let us add items to it and those items are going to be the individual messages.

164
00:10:53,920 --> 00:10:56,760
Now we are going to be giving this an id attribute.

165
00:10:56,830 --> 00:11:01,420
I'm going to call the I.D. in this case messages awesome.

166
00:11:01,830 --> 00:11:04,440
Now this is all we need to do in indexed out HDMI.

167
00:11:04,450 --> 00:11:07,820
All of the heavy lifting is going to happen over inside of index.

168
00:11:07,870 --> 00:11:08,570
Yes.

169
00:11:08,640 --> 00:11:13,590
When a new message comes in we want to add something inside of the ordered list so that gets rendered

170
00:11:13,650 --> 00:11:16,500
to the screen over inside of index Dhananjay.

171
00:11:16,500 --> 00:11:22,150
Yes we can get this done by modifying our callback function when a new message arrives.

172
00:11:22,230 --> 00:11:27,270
The first thing we're going to do is create a list item and we're going to do this once again using

173
00:11:27,270 --> 00:11:28,150
Jay Querrey.

174
00:11:28,200 --> 00:11:29,700
We're going to make a variable.

175
00:11:29,760 --> 00:11:36,070
This variable is going to be called out I and we're going to go ahead and use Jay query slightly differently

176
00:11:36,450 --> 00:11:41,550
rather than using Jay Querrey to select an element we're going to use Jay Querrey to create an element

177
00:11:41,760 --> 00:11:48,300
and then we can modify that element and add it into the markup making it visible right here inside of

178
00:11:48,300 --> 00:11:48,720
quotes.

179
00:11:48,720 --> 00:11:54,730
We're going to open and close an ally tag just like we would inside of index dot H.T. amount.

180
00:11:54,900 --> 00:11:58,920
Now that we have this in place we have to go ad in its text property.

181
00:11:59,190 --> 00:12:04,970
I'm going to set ally dot text by calling ally dot text with de-value.

182
00:12:05,010 --> 00:12:11,070
I want to use in this case the text is going to require us to set up a little template string inside

183
00:12:11,070 --> 00:12:12,450
of the template string.

184
00:12:12,450 --> 00:12:15,680
We are going to go ahead and use the data that comes back.

185
00:12:15,690 --> 00:12:19,880
For now we're going to use the frim attribute and the text attribute.

186
00:12:19,890 --> 00:12:21,740
Let's get started with who it's from.

187
00:12:21,810 --> 00:12:26,210
Then we'll add a little colon and a space to separate that from the actual message.

188
00:12:26,250 --> 00:12:30,590
And finally it will inject message text at the end.

189
00:12:30,600 --> 00:12:34,000
Now at this point we've created an element but we haven't rendered it to the DOM.

190
00:12:34,080 --> 00:12:38,130
What we're going to do is use a query to select that brand new element we created.

191
00:12:38,220 --> 00:12:45,300
We gave it an idea of messages and we're going to append something to it by calling the append method.

192
00:12:45,300 --> 00:12:47,880
This is going to add it as its last child.

193
00:12:47,880 --> 00:12:49,680
So there's already three items in the list.

194
00:12:49,680 --> 00:12:54,860
The newest one will show up below those three as the fourth item in our ordered list.

195
00:12:54,990 --> 00:12:59,310
Oh we have to do is call append as a function passing in our list item.

196
00:12:59,460 --> 00:13:01,390
And with this in place we are done.

197
00:13:01,410 --> 00:13:06,210
Now if you're not familiar with J queries this can be a bit overwhelming but I promise the techniques

198
00:13:06,210 --> 00:13:10,950
we use here will be using throughout the course by the end you'll be much more comfortable selecting

199
00:13:10,980 --> 00:13:13,290
and creating elements.

200
00:13:13,290 --> 00:13:16,080
Let's go ahead and test things out over inside of Google Chrome.

201
00:13:16,080 --> 00:13:22,480
I'm going to refresh tab 1 and when I do you can see from is not defined over in the right hand side.

202
00:13:22,500 --> 00:13:29,310
If I go back into Adam this is most likely just a really small typo and you can see that is the case.

203
00:13:29,310 --> 00:13:35,160
Message from is defined which means I can save the file and give things a refresh simple errors like

204
00:13:35,160 --> 00:13:38,050
this can easily be checked down using the developer tools.

205
00:13:38,070 --> 00:13:43,050
They actually give you some pretty great error information as well as an entire call stack on the right

206
00:13:43,050 --> 00:13:43,740
hand side.

207
00:13:43,770 --> 00:13:45,750
You can usually click this little link.

208
00:13:45,780 --> 00:13:50,240
This is going to bring you to the sources tab but it's going to show you exactly where the error occurred.

209
00:13:50,250 --> 00:13:55,770
Here you can see not only the line the error occurred but the actual indentation into the line the error

210
00:13:55,890 --> 00:13:57,740
occurred right here.

211
00:13:57,750 --> 00:14:03,060
This is really fantastic it makes the bugging much easier if you run into an error inside of the console.

212
00:14:03,060 --> 00:14:09,380
You can usually get more information by either expanding it or going right to the source of the problem.

213
00:14:09,420 --> 00:14:14,660
Now that we've fixed that error and we give the app a refresh we do see are two messages.

214
00:14:14,670 --> 00:14:16,430
Welcome to the chat app shows up.

215
00:14:16,440 --> 00:14:18,390
And Frank says hi.

216
00:14:18,600 --> 00:14:19,670
Now welcome to the chat app.

217
00:14:19,670 --> 00:14:24,850
Should Show Up the Frank Hyde message is coming from right here inside an index Dot.

218
00:14:24,910 --> 00:14:30,540
Yes we can actually go ahead and remove that we no longer need to automatically emit messages since

219
00:14:30,540 --> 00:14:33,810
we have a form set up to get that done for us.

220
00:14:33,810 --> 00:14:39,510
Once again we can save the file refresh the browser and this time around we have a nice little setup.

221
00:14:39,510 --> 00:14:41,800
Welcome to the chat app.

222
00:14:41,820 --> 00:14:46,470
I'm going to do the same thing for our second tab this time around we get Welcome to the chat app.

223
00:14:46,470 --> 00:14:51,270
And in the first how we get new user joined this is fantastic.

224
00:14:51,270 --> 00:14:56,900
Now the true test is going to be to send a message from one tab to the other.

225
00:14:56,920 --> 00:15:01,770
This should go to tab two.

226
00:15:02,110 --> 00:15:06,130
I'm going to send this off and when I click this button it's going to emit the event that's going to

227
00:15:06,130 --> 00:15:09,880
go to the server and the server is going to send it to everyone connected.

228
00:15:09,880 --> 00:15:15,250
Right here I can see this should go to tab two renders and over inside of my second tab we get the message

229
00:15:15,280 --> 00:15:16,120
as well.

230
00:15:16,120 --> 00:15:17,800
I can come here and respond.

231
00:15:19,300 --> 00:15:22,390
And when I respond it shows up in both tabs.

232
00:15:22,390 --> 00:15:25,930
Now we're not quite done with the UI or the actual user experience.

233
00:15:25,930 --> 00:15:30,880
Custom names and time stamps are coming up but we do have a fantastic start.

234
00:15:30,880 --> 00:15:36,430
We now have a form where we can submit messages and we can see all of the incoming messages inside of

235
00:15:36,490 --> 00:15:40,360
the browser which means we didn't need to do anything in the developer tools anymore.

236
00:15:40,480 --> 00:15:45,700
In terms of a meeting or reading our messages that is it for this one let's go ahead and wrap things

237
00:15:45,700 --> 00:15:49,210
up by making a commit now that we have some working changes.

238
00:15:49,300 --> 00:15:51,540
I'm going to shut down the server.

239
00:15:51,880 --> 00:15:56,080
Clear the output and run it get status so he can double check all of our changes.

240
00:15:56,080 --> 00:15:57,620
Everything looks good here.

241
00:15:57,700 --> 00:15:58,150
I'm going to use.

242
00:15:58,150 --> 00:16:01,290
Get add to add all of the files including my untracked.

243
00:16:01,300 --> 00:16:04,040
Jay Querrey file to the repo then I can use.

244
00:16:04,040 --> 00:16:06,670
Get commit to make the commit.

245
00:16:06,670 --> 00:16:15,390
I'm going to use the flag here and a good message for this one would be add form for messages and show

246
00:16:15,870 --> 00:16:24,430
incoming messages in browser once we have this in place we can go ahead and push this up to get how

247
00:16:24,440 --> 00:16:29,400
but I am going to take a moment to deploy the Heroku now that we have something real visible and tangible

248
00:16:29,430 --> 00:16:34,820
to use get push Heroku master is going to get that done.

249
00:16:35,130 --> 00:16:40,140
Once this is up we'll be able to visit it in the browser as you can see over inside of my council socket

250
00:16:40,170 --> 00:16:42,300
I O is trying to reconnect to the server.

251
00:16:42,300 --> 00:16:46,950
Unfortunately we're not going to be bringing it back up so it's going to try a little longer.

252
00:16:46,950 --> 00:16:50,840
Here we are we're verifying the deploy and everything is up and running.

253
00:16:50,850 --> 00:16:53,130
You can either on Heroku open or copy this.

254
00:16:53,130 --> 00:16:59,250
You are out directly I'm going to go ahead and close my two localhost tabs and open up the actual Heroku

255
00:16:59,550 --> 00:17:00,890
app right here.

256
00:17:00,900 --> 00:17:02,900
We do get our Welcome to the chat app message.

257
00:17:02,910 --> 00:17:05,710
And we do get our form everything looks good so far.

258
00:17:05,880 --> 00:17:12,930
I'm going to go ahead and open up a different browser like Safari going to go to the chat app as well.

259
00:17:14,910 --> 00:17:18,570
And we're going to bring these windows side by side over inside a safari.

260
00:17:18,570 --> 00:17:19,950
I'm going to type a little message.

261
00:17:19,950 --> 00:17:22,490
This is live on Heroku.

262
00:17:22,830 --> 00:17:29,580
Click send or hit the enter key and instantly it shows up in the other browser in the other tab.

263
00:17:29,580 --> 00:17:33,930
This is because our lives socket server is transmitting this data.

264
00:17:33,930 --> 00:17:38,340
This could happen between any computer in the world you do not need to be on my machine since we're

265
00:17:38,340 --> 00:17:40,560
using a real Heroku you are.

266
00:17:40,740 --> 00:17:43,730
Now that everything's working on Heroku we are done.

267
00:17:43,770 --> 00:17:45,330
I will see you next time

